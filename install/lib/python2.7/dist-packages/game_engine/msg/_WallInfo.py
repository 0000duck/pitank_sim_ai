# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from game_engine/WallInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WallInfo(genpy.Message):
  _md5sum = "482f13cf5512672ba58ca13deaa6419c"
  _type = "game_engine/WallInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 id
int8 cluster
int16 x1
int16 x2
int16 y1
int16 y2
float64 xc
float64 yc
int8 life
bool vertical
"""
  __slots__ = ['id','cluster','x1','x2','y1','y2','xc','yc','life','vertical']
  _slot_types = ['int8','int8','int16','int16','int16','int16','float64','float64','int8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,cluster,x1,x2,y1,y2,xc,yc,life,vertical

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WallInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.cluster is None:
        self.cluster = 0
      if self.x1 is None:
        self.x1 = 0
      if self.x2 is None:
        self.x2 = 0
      if self.y1 is None:
        self.y1 = 0
      if self.y2 is None:
        self.y2 = 0
      if self.xc is None:
        self.xc = 0.
      if self.yc is None:
        self.yc = 0.
      if self.life is None:
        self.life = 0
      if self.vertical is None:
        self.vertical = False
    else:
      self.id = 0
      self.cluster = 0
      self.x1 = 0
      self.x2 = 0
      self.y1 = 0
      self.y2 = 0
      self.xc = 0.
      self.yc = 0.
      self.life = 0
      self.vertical = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2b4h2dbB().pack(_x.id, _x.cluster, _x.x1, _x.x2, _x.y1, _x.y2, _x.xc, _x.yc, _x.life, _x.vertical))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.cluster, _x.x1, _x.x2, _x.y1, _x.y2, _x.xc, _x.yc, _x.life, _x.vertical,) = _get_struct_2b4h2dbB().unpack(str[start:end])
      self.vertical = bool(self.vertical)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2b4h2dbB().pack(_x.id, _x.cluster, _x.x1, _x.x2, _x.y1, _x.y2, _x.xc, _x.yc, _x.life, _x.vertical))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.cluster, _x.x1, _x.x2, _x.y1, _x.y2, _x.xc, _x.yc, _x.life, _x.vertical,) = _get_struct_2b4h2dbB().unpack(str[start:end])
      self.vertical = bool(self.vertical)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b4h2dbB = None
def _get_struct_2b4h2dbB():
    global _struct_2b4h2dbB
    if _struct_2b4h2dbB is None:
        _struct_2b4h2dbB = struct.Struct("<2b4h2dbB")
    return _struct_2b4h2dbB
