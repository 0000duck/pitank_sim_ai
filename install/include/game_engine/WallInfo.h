// Generated by gencpp from file game_engine/WallInfo.msg
// DO NOT EDIT!


#ifndef GAME_ENGINE_MESSAGE_WALLINFO_H
#define GAME_ENGINE_MESSAGE_WALLINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace game_engine
{
template <class ContainerAllocator>
struct WallInfo_
{
  typedef WallInfo_<ContainerAllocator> Type;

  WallInfo_()
    : id(0)
    , cluster(0)
    , x1(0)
    , x2(0)
    , y1(0)
    , y2(0)
    , xc(0.0)
    , yc(0.0)
    , life(0)
    , vertical(false)  {
    }
  WallInfo_(const ContainerAllocator& _alloc)
    : id(0)
    , cluster(0)
    , x1(0)
    , x2(0)
    , y1(0)
    , y2(0)
    , xc(0.0)
    , yc(0.0)
    , life(0)
    , vertical(false)  {
  (void)_alloc;
    }



   typedef int8_t _id_type;
  _id_type id;

   typedef int8_t _cluster_type;
  _cluster_type cluster;

   typedef int16_t _x1_type;
  _x1_type x1;

   typedef int16_t _x2_type;
  _x2_type x2;

   typedef int16_t _y1_type;
  _y1_type y1;

   typedef int16_t _y2_type;
  _y2_type y2;

   typedef double _xc_type;
  _xc_type xc;

   typedef double _yc_type;
  _yc_type yc;

   typedef int8_t _life_type;
  _life_type life;

   typedef uint8_t _vertical_type;
  _vertical_type vertical;





  typedef boost::shared_ptr< ::game_engine::WallInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::game_engine::WallInfo_<ContainerAllocator> const> ConstPtr;

}; // struct WallInfo_

typedef ::game_engine::WallInfo_<std::allocator<void> > WallInfo;

typedef boost::shared_ptr< ::game_engine::WallInfo > WallInfoPtr;
typedef boost::shared_ptr< ::game_engine::WallInfo const> WallInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::game_engine::WallInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::game_engine::WallInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace game_engine

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'game_engine': ['/home/sergio/teste420/src/game_engine/msg'], 'geometry_msgs': ['/opt/ros/lunar/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::game_engine::WallInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::game_engine::WallInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::game_engine::WallInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::game_engine::WallInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::game_engine::WallInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::game_engine::WallInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::game_engine::WallInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "482f13cf5512672ba58ca13deaa6419c";
  }

  static const char* value(const ::game_engine::WallInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x482f13cf5512672bULL;
  static const uint64_t static_value2 = 0xa58ca13deaa6419cULL;
};

template<class ContainerAllocator>
struct DataType< ::game_engine::WallInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "game_engine/WallInfo";
  }

  static const char* value(const ::game_engine::WallInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::game_engine::WallInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 id\n\
int8 cluster\n\
int16 x1\n\
int16 x2\n\
int16 y1\n\
int16 y2\n\
float64 xc\n\
float64 yc\n\
int8 life\n\
bool vertical\n\
";
  }

  static const char* value(const ::game_engine::WallInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::game_engine::WallInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.cluster);
      stream.next(m.x1);
      stream.next(m.x2);
      stream.next(m.y1);
      stream.next(m.y2);
      stream.next(m.xc);
      stream.next(m.yc);
      stream.next(m.life);
      stream.next(m.vertical);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WallInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::game_engine::WallInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::game_engine::WallInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "cluster: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cluster);
    s << indent << "x1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x1);
    s << indent << "x2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x2);
    s << indent << "y1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y1);
    s << indent << "y2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y2);
    s << indent << "xc: ";
    Printer<double>::stream(s, indent + "  ", v.xc);
    s << indent << "yc: ";
    Printer<double>::stream(s, indent + "  ", v.yc);
    s << indent << "life: ";
    Printer<int8_t>::stream(s, indent + "  ", v.life);
    s << indent << "vertical: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vertical);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAME_ENGINE_MESSAGE_WALLINFO_H
