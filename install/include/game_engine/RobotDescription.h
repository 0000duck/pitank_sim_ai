// Generated by gencpp from file game_engine/RobotDescription.msg
// DO NOT EDIT!


#ifndef GAME_ENGINE_MESSAGE_ROBOTDESCRIPTION_H
#define GAME_ENGINE_MESSAGE_ROBOTDESCRIPTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace game_engine
{
template <class ContainerAllocator>
struct RobotDescription_
{
  typedef RobotDescription_<ContainerAllocator> Type;

  RobotDescription_()
    : teamId(0)
    , tagId(0)
    , x(0)
    , y(0)
    , height(0.0)
    , angle(0.0)
    , addr0(0)
    , addr1(0)
    , vel1(0)
    , vel2(0)
    , previous_vel(0)
    , collisionFlag(false)
    , threadIsRunning(false)
    , collisionStateVar(0)
    , autonomous_drive(false)
    , immobilized(false)
    , damage(0)
    , kills(0)
    , classification(0)  {
    }
  RobotDescription_(const ContainerAllocator& _alloc)
    : teamId(0)
    , tagId(0)
    , x(0)
    , y(0)
    , height(0.0)
    , angle(0.0)
    , addr0(0)
    , addr1(0)
    , vel1(0)
    , vel2(0)
    , previous_vel(0)
    , collisionFlag(false)
    , threadIsRunning(false)
    , collisionStateVar(0)
    , autonomous_drive(false)
    , immobilized(false)
    , damage(0)
    , kills(0)
    , classification(0)  {
  (void)_alloc;
    }



   typedef int8_t _teamId_type;
  _teamId_type teamId;

   typedef int8_t _tagId_type;
  _tagId_type tagId;

   typedef int16_t _x_type;
  _x_type x;

   typedef int16_t _y_type;
  _y_type y;

   typedef double _height_type;
  _height_type height;

   typedef double _angle_type;
  _angle_type angle;

   typedef uint8_t _addr0_type;
  _addr0_type addr0;

   typedef uint8_t _addr1_type;
  _addr1_type addr1;

   typedef int8_t _vel1_type;
  _vel1_type vel1;

   typedef int8_t _vel2_type;
  _vel2_type vel2;

   typedef int8_t _previous_vel_type;
  _previous_vel_type previous_vel;

   typedef uint8_t _collisionFlag_type;
  _collisionFlag_type collisionFlag;

   typedef uint8_t _threadIsRunning_type;
  _threadIsRunning_type threadIsRunning;

   typedef int8_t _collisionStateVar_type;
  _collisionStateVar_type collisionStateVar;

   typedef uint8_t _autonomous_drive_type;
  _autonomous_drive_type autonomous_drive;

   typedef uint8_t _immobilized_type;
  _immobilized_type immobilized;

   typedef int8_t _damage_type;
  _damage_type damage;

   typedef int8_t _kills_type;
  _kills_type kills;

   typedef int8_t _classification_type;
  _classification_type classification;





  typedef boost::shared_ptr< ::game_engine::RobotDescription_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::game_engine::RobotDescription_<ContainerAllocator> const> ConstPtr;

}; // struct RobotDescription_

typedef ::game_engine::RobotDescription_<std::allocator<void> > RobotDescription;

typedef boost::shared_ptr< ::game_engine::RobotDescription > RobotDescriptionPtr;
typedef boost::shared_ptr< ::game_engine::RobotDescription const> RobotDescriptionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::game_engine::RobotDescription_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::game_engine::RobotDescription_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace game_engine

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'game_engine': ['/home/sergio/teste420/src/game_engine/msg'], 'geometry_msgs': ['/opt/ros/lunar/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::game_engine::RobotDescription_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::game_engine::RobotDescription_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::game_engine::RobotDescription_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::game_engine::RobotDescription_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::game_engine::RobotDescription_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::game_engine::RobotDescription_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::game_engine::RobotDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cf265d8beafbba35b81c1d375a1e5ac";
  }

  static const char* value(const ::game_engine::RobotDescription_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cf265d8beafbba3ULL;
  static const uint64_t static_value2 = 0x5b81c1d375a1e5acULL;
};

template<class ContainerAllocator>
struct DataType< ::game_engine::RobotDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "game_engine/RobotDescription";
  }

  static const char* value(const ::game_engine::RobotDescription_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::game_engine::RobotDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 teamId\n\
int8 tagId\n\
int16 x\n\
int16 y\n\
float64 height\n\
float64 angle\n\
uint8 addr0\n\
uint8 addr1\n\
int8 vel1\n\
int8 vel2\n\
int8 previous_vel\n\
bool collisionFlag\n\
bool threadIsRunning\n\
int8 collisionStateVar\n\
bool autonomous_drive\n\
bool immobilized\n\
int8 damage\n\
int8 kills\n\
int8 classification\n\
\n\
";
  }

  static const char* value(const ::game_engine::RobotDescription_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::game_engine::RobotDescription_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.teamId);
      stream.next(m.tagId);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.height);
      stream.next(m.angle);
      stream.next(m.addr0);
      stream.next(m.addr1);
      stream.next(m.vel1);
      stream.next(m.vel2);
      stream.next(m.previous_vel);
      stream.next(m.collisionFlag);
      stream.next(m.threadIsRunning);
      stream.next(m.collisionStateVar);
      stream.next(m.autonomous_drive);
      stream.next(m.immobilized);
      stream.next(m.damage);
      stream.next(m.kills);
      stream.next(m.classification);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotDescription_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::game_engine::RobotDescription_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::game_engine::RobotDescription_<ContainerAllocator>& v)
  {
    s << indent << "teamId: ";
    Printer<int8_t>::stream(s, indent + "  ", v.teamId);
    s << indent << "tagId: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tagId);
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "addr0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.addr0);
    s << indent << "addr1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.addr1);
    s << indent << "vel1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.vel1);
    s << indent << "vel2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.vel2);
    s << indent << "previous_vel: ";
    Printer<int8_t>::stream(s, indent + "  ", v.previous_vel);
    s << indent << "collisionFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.collisionFlag);
    s << indent << "threadIsRunning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.threadIsRunning);
    s << indent << "collisionStateVar: ";
    Printer<int8_t>::stream(s, indent + "  ", v.collisionStateVar);
    s << indent << "autonomous_drive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autonomous_drive);
    s << indent << "immobilized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.immobilized);
    s << indent << "damage: ";
    Printer<int8_t>::stream(s, indent + "  ", v.damage);
    s << indent << "kills: ";
    Printer<int8_t>::stream(s, indent + "  ", v.kills);
    s << indent << "classification: ";
    Printer<int8_t>::stream(s, indent + "  ", v.classification);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAME_ENGINE_MESSAGE_ROBOTDESCRIPTION_H
