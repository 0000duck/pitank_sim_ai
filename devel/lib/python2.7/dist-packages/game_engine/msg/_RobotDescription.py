# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from game_engine/RobotDescription.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotDescription(genpy.Message):
  _md5sum = "7cf265d8beafbba35b81c1d375a1e5ac"
  _type = "game_engine/RobotDescription"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 teamId
int8 tagId
int16 x
int16 y
float64 height
float64 angle
uint8 addr0
uint8 addr1
int8 vel1
int8 vel2
int8 previous_vel
bool collisionFlag
bool threadIsRunning
int8 collisionStateVar
bool autonomous_drive
bool immobilized
int8 damage
int8 kills
int8 classification

"""
  __slots__ = ['teamId','tagId','x','y','height','angle','addr0','addr1','vel1','vel2','previous_vel','collisionFlag','threadIsRunning','collisionStateVar','autonomous_drive','immobilized','damage','kills','classification']
  _slot_types = ['int8','int8','int16','int16','float64','float64','uint8','uint8','int8','int8','int8','bool','bool','int8','bool','bool','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       teamId,tagId,x,y,height,angle,addr0,addr1,vel1,vel2,previous_vel,collisionFlag,threadIsRunning,collisionStateVar,autonomous_drive,immobilized,damage,kills,classification

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotDescription, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.teamId is None:
        self.teamId = 0
      if self.tagId is None:
        self.tagId = 0
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.height is None:
        self.height = 0.
      if self.angle is None:
        self.angle = 0.
      if self.addr0 is None:
        self.addr0 = 0
      if self.addr1 is None:
        self.addr1 = 0
      if self.vel1 is None:
        self.vel1 = 0
      if self.vel2 is None:
        self.vel2 = 0
      if self.previous_vel is None:
        self.previous_vel = 0
      if self.collisionFlag is None:
        self.collisionFlag = False
      if self.threadIsRunning is None:
        self.threadIsRunning = False
      if self.collisionStateVar is None:
        self.collisionStateVar = 0
      if self.autonomous_drive is None:
        self.autonomous_drive = False
      if self.immobilized is None:
        self.immobilized = False
      if self.damage is None:
        self.damage = 0
      if self.kills is None:
        self.kills = 0
      if self.classification is None:
        self.classification = 0
    else:
      self.teamId = 0
      self.tagId = 0
      self.x = 0
      self.y = 0
      self.height = 0.
      self.angle = 0.
      self.addr0 = 0
      self.addr1 = 0
      self.vel1 = 0
      self.vel2 = 0
      self.previous_vel = 0
      self.collisionFlag = False
      self.threadIsRunning = False
      self.collisionStateVar = 0
      self.autonomous_drive = False
      self.immobilized = False
      self.damage = 0
      self.kills = 0
      self.classification = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2b2h2d2B3b2Bb2B3b().pack(_x.teamId, _x.tagId, _x.x, _x.y, _x.height, _x.angle, _x.addr0, _x.addr1, _x.vel1, _x.vel2, _x.previous_vel, _x.collisionFlag, _x.threadIsRunning, _x.collisionStateVar, _x.autonomous_drive, _x.immobilized, _x.damage, _x.kills, _x.classification))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.teamId, _x.tagId, _x.x, _x.y, _x.height, _x.angle, _x.addr0, _x.addr1, _x.vel1, _x.vel2, _x.previous_vel, _x.collisionFlag, _x.threadIsRunning, _x.collisionStateVar, _x.autonomous_drive, _x.immobilized, _x.damage, _x.kills, _x.classification,) = _get_struct_2b2h2d2B3b2Bb2B3b().unpack(str[start:end])
      self.collisionFlag = bool(self.collisionFlag)
      self.threadIsRunning = bool(self.threadIsRunning)
      self.autonomous_drive = bool(self.autonomous_drive)
      self.immobilized = bool(self.immobilized)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2b2h2d2B3b2Bb2B3b().pack(_x.teamId, _x.tagId, _x.x, _x.y, _x.height, _x.angle, _x.addr0, _x.addr1, _x.vel1, _x.vel2, _x.previous_vel, _x.collisionFlag, _x.threadIsRunning, _x.collisionStateVar, _x.autonomous_drive, _x.immobilized, _x.damage, _x.kills, _x.classification))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.teamId, _x.tagId, _x.x, _x.y, _x.height, _x.angle, _x.addr0, _x.addr1, _x.vel1, _x.vel2, _x.previous_vel, _x.collisionFlag, _x.threadIsRunning, _x.collisionStateVar, _x.autonomous_drive, _x.immobilized, _x.damage, _x.kills, _x.classification,) = _get_struct_2b2h2d2B3b2Bb2B3b().unpack(str[start:end])
      self.collisionFlag = bool(self.collisionFlag)
      self.threadIsRunning = bool(self.threadIsRunning)
      self.autonomous_drive = bool(self.autonomous_drive)
      self.immobilized = bool(self.immobilized)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b2h2d2B3b2Bb2B3b = None
def _get_struct_2b2h2d2B3b2Bb2B3b():
    global _struct_2b2h2d2B3b2Bb2B3b
    if _struct_2b2h2d2B3b2Bb2B3b is None:
        _struct_2b2h2d2B3b2Bb2B3b = struct.Struct("<2b2h2d2B3b2Bb2B3b")
    return _struct_2b2h2d2B3b2Bb2B3b
