# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from game_engine/RobotDescriptionArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import game_engine.msg

class RobotDescriptionArray(genpy.Message):
  _md5sum = "45d1754f7b775ee13a5901da7fffb910"
  _type = "game_engine/RobotDescriptionArray"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """RobotDescription[] robot

================================================================================
MSG: game_engine/RobotDescription
int8 teamId
int8 tagId
int16 x
int16 y
float64 height
float64 angle
uint8 addr0
uint8 addr1
int8 vel1
int8 vel2
int8 previous_vel
bool collisionFlag
bool threadIsRunning
int8 collisionStateVar
bool autonomous_drive
bool immobilized
int8 damage
int8 kills
int8 classification

"""
  __slots__ = ['robot']
  _slot_types = ['game_engine/RobotDescription[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotDescriptionArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot is None:
        self.robot = []
    else:
      self.robot = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.robot)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot:
        _x = val1
        buff.write(_get_struct_2b2h2d2B3b2Bb2B3b().pack(_x.teamId, _x.tagId, _x.x, _x.y, _x.height, _x.angle, _x.addr0, _x.addr1, _x.vel1, _x.vel2, _x.previous_vel, _x.collisionFlag, _x.threadIsRunning, _x.collisionStateVar, _x.autonomous_drive, _x.immobilized, _x.damage, _x.kills, _x.classification))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.robot is None:
        self.robot = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot = []
      for i in range(0, length):
        val1 = game_engine.msg.RobotDescription()
        _x = val1
        start = end
        end += 35
        (_x.teamId, _x.tagId, _x.x, _x.y, _x.height, _x.angle, _x.addr0, _x.addr1, _x.vel1, _x.vel2, _x.previous_vel, _x.collisionFlag, _x.threadIsRunning, _x.collisionStateVar, _x.autonomous_drive, _x.immobilized, _x.damage, _x.kills, _x.classification,) = _get_struct_2b2h2d2B3b2Bb2B3b().unpack(str[start:end])
        val1.collisionFlag = bool(val1.collisionFlag)
        val1.threadIsRunning = bool(val1.threadIsRunning)
        val1.autonomous_drive = bool(val1.autonomous_drive)
        val1.immobilized = bool(val1.immobilized)
        self.robot.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.robot)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot:
        _x = val1
        buff.write(_get_struct_2b2h2d2B3b2Bb2B3b().pack(_x.teamId, _x.tagId, _x.x, _x.y, _x.height, _x.angle, _x.addr0, _x.addr1, _x.vel1, _x.vel2, _x.previous_vel, _x.collisionFlag, _x.threadIsRunning, _x.collisionStateVar, _x.autonomous_drive, _x.immobilized, _x.damage, _x.kills, _x.classification))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.robot is None:
        self.robot = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot = []
      for i in range(0, length):
        val1 = game_engine.msg.RobotDescription()
        _x = val1
        start = end
        end += 35
        (_x.teamId, _x.tagId, _x.x, _x.y, _x.height, _x.angle, _x.addr0, _x.addr1, _x.vel1, _x.vel2, _x.previous_vel, _x.collisionFlag, _x.threadIsRunning, _x.collisionStateVar, _x.autonomous_drive, _x.immobilized, _x.damage, _x.kills, _x.classification,) = _get_struct_2b2h2d2B3b2Bb2B3b().unpack(str[start:end])
        val1.collisionFlag = bool(val1.collisionFlag)
        val1.threadIsRunning = bool(val1.threadIsRunning)
        val1.autonomous_drive = bool(val1.autonomous_drive)
        val1.immobilized = bool(val1.immobilized)
        self.robot.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b2h2d2B3b2Bb2B3b = None
def _get_struct_2b2h2d2B3b2Bb2B3b():
    global _struct_2b2h2d2B3b2Bb2B3b
    if _struct_2b2h2d2B3b2Bb2B3b is None:
        _struct_2b2h2d2B3b2Bb2B3b = struct.Struct("<2b2h2d2B3b2Bb2B3b")
    return _struct_2b2h2d2B3b2Bb2B3b
